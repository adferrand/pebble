image: Visual Studio 2017

hosts:
  example.letsencrypt.org: 127.0.0.1
  elpmaxe.letsencrypt.org: 127.0.0.1

environment:
  GO111MODULE: on
  PATH: C:\Python37;C:\msys64\mingw64\bin;%USERPROFILE%\go\bin;%PATH%

install:
  # TODO(#204): Change back to cloning master once Certbot omits keyAuthorization.
  - git clone --depth=1 -b no-keyauthorization-windows https://github.com/certbot/certbot
  - cd certbot
  - python tools\venv3.py
  - venv3\Scripts\activate.bat
  - cd ..

before_build:
  # Install `golangci-lint` using go get (installer not available for Windows)
  - go get github.com/golangci/golangci-lint/cmd/golangci-lint@v1.15.0
  # Install `cover` and `goveralls` without `GO111MODULE` enabled so that we
  # don't download ct-woodpecker dependencies and just put the tools in our
  # gobin.
  - cmd /c "set "GO111MODULE=off" && go get golang.org/x/tools/cmd/cover"
  - cmd /c "set "GO111MODULE=off" && go get github.com/mattn/goveralls"

build_script:
  - go install -v -mod=vendor ./...

after_build:
  - ps: $PebbleProcess = Start-Process pebble -PassThru

test_script:
  - go mod download
  # Vet Go source code using the linter config (see .golang-ci.yml)
  - golangci-lint run
  # Run project unit tests (with the race detector enabled and atomic
  # coverage profile collection)
  - go test -mod=vendor -v -race -covermode=atomic -coverprofile=coverage.out ./...
  # Upload collected coverage profile to goveralls
  - goveralls -coverprofile=coverage.out -service=appveyor
  # Perform a test issuance with chisel2.py
  - cmd /c "set REQUESTS_CA_BUNDLE=./test/certs/pebble.minica.pem && python .\test\chisel2.py example.letsencrypt.org elpmaxe.letsencrypt.org"

deploy_script:
  - ps: .ci\publish_windows.ps1
